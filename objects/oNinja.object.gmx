<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGolHide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
after = 0;
grav = oPlayer1.grav;
STANDING=10;
RUNNING=11;
ATTACKING=12;
FALLING=13;
HIDING=14;
JUMPING=15;
DYING=16;
STUNNED=17;

RIGHT=1;
LEFT=-1;

state=HIDING;
facing=RIGHT;

leftCollisionBound=0-(sprite_width/2);
rightCollisionBound=sprite_width/2;
setCollisionBounds(leftCollisionBound+2,-25,rightCollisionBound-2,20);
deathfade =15;

//Sprite Skin variables
var StandSpr, RunSpr, AtkSpr, DeadSpr, HideSpr;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(timer &gt; 0){
  timer--;
}

// Apply Gravity
if(state != HIDING) {
  yVel+=grav;
}
// If it hits the ground from falling, it's standing now
if (isCollisionBottom(1)) {
  if(state == FALLING || state == JUMPING) {
    state = STANDING;
  }
  yVel=0;
}

// If it runs into something, attempt to jump over
if ((isCollisionLeft(1) || isCollisionRight(1)) &amp;&amp; state!= STUNNED) {
  xVel = 0;
  // attempt to jump over
  if (state != JUMPING &amp;&amp; isCollisionBottom(1) &amp;&amp; (abs(oPlayer1.x - x) &gt; 30 || oPlayer1.y - 40 &gt; y)) {
    yVel = -7;
    after = 1;
    state = JUMPING;
  }
}

// If it jumps or runs off a ledge, do the falling animation 
if(state == RUNNING &amp;&amp; abs(yVel) != 0) {
  state = FALLING;
}


if(facing==LEFT){
  // Wait for player to pass
  if(state == HIDING){
    if(oPlayer1.x + 100 &lt;= x){
      state = FALLING;
      yVel = 6;
      facing = RIGHT;
    }
  }
  // Attack player if close enough and grounded
  if((state == RUNNING || state == STANDING) &amp;&amp; abs(oPlayer1.x - x) &lt;= 40 &amp;&amp; state!=DYING &amp;&amp; state!=STUNNED){
    xVel = 0;
    state=ATTACKING;
  }
  // Run after player
  if(state != HIDING &amp;&amp; state!= FALLING &amp;&amp; state != ATTACKING &amp;&amp; state!=DYING &amp;&amp; state!=STUNNED){
    if(oPlayer1.x &lt; x){
      facing = LEFT;
      state = RUNNING;
      xVel = -6;
    } else if(oPlayer1.x &gt; x) {
      facing = RIGHT;
      state = RUNNING;
      xVel = 6;
    }
  }

} else if(facing==RIGHT){
  if(state==HIDING){
    // Wait for player to pass
    if(oPlayer1.x - 100 &gt;= x){
      state = FALLING;
      yVel = 6;
      facing = LEFT;
    }
  }
  // Attack player if close enough and grounded
  if((state == RUNNING || state == STANDING) &amp;&amp; abs(oPlayer1.x - x) &lt;= 40 &amp;&amp; state!=DYING &amp;&amp; state!=STUNNED){
    xVel = 0;
    state=ATTACKING;
  }
  // Run after player
  if(state != HIDING &amp;&amp; state != FALLING &amp;&amp; state != ATTACKING &amp;&amp; state!=DYING &amp;&amp; state!=DYING &amp;&amp; state!=STUNNED){
    if(oPlayer1.x &gt; x){
      facing = RIGHT;
      state = RUNNING;
      xVel = 6;
    } else if(oPlayer1.x &lt; x){
      facing = LEFT;
      state = RUNNING;
      xVel = -6;
    }
  }
}

// stun handling
if(stunTimer &gt; 0){
  state = STUNNED;
  switch(stunType){
    case 1:
      xVel = 0;
      x = random_range(x-knockX/2,x+knockX/2)
      y = random_range(y, y-knockY)
      break;
    case 2:
      xVel = knockX;
      yVel = knockY;
      if(timer % 2 == 1){
        var AfterImage = instance_create(x, y, oAfterImage);
        AfterImage.sprite_index = sprite_index;
        AfterImage.image_index = image_index;
        AfterImage.facing = sign(xVel);
        AfterImage.color = c_white;
      }
      break;
    case 3:
      xVel = 0;
      yVel = 0;
    case 4:
      break; 
    default:
      break;
  }
  stunTimer--;
  if(stunTimer == 0){
    state = RUNNING;
    if(stunType == 1){
      x=stunX;
      y=stunY;
    }
    stunType = 0;
  } 
}

// Move if not hitting against something
if((state == JUMPING || state == FALLING) &amp;&amp; facing == LEFT) {
  xVel = -4;
} else if((state == JUMPING || state == FALLING) &amp;&amp; facing == RIGHT) {
  xVel = 4;
}

moveTo(xVel,yVel);
if (y&gt;room_height+30) {instance_destroy();}
if(enHealth &lt;= 0){
  state = DYING;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == ATTACKING &amp;&amp; stunTimer == 0) {
  state = STANDING;
  if (oPlayer1.x &gt; x) {
    facing = RIGHT;
  } else {
    facing = LEFT;
  }
}
if (state == DYING) {
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>StandSpr = sGolIdle;
RunSpr = sGolRun; 
AtkSpr = sGolAtk; 
DeadSpr = sGolDie; 
HideSpr = sGolHide;

//figures out what the sprite index of the character should be
//handles right facing anims
if (facing==RIGHT)  {
  if (state==STANDING || state == FALLING || state == JUMPING) {
    image_speed = 0.08;
    sprite_index=StandSpr;
  }
  if (state==RUNNING)
  {
    image_speed=1;
    sprite_index=RunSpr;
  }
  if (state==ATTACKING) {
    image_speed=1;
    sprite_index=AtkSpr;
  }
  if (state==HIDING) {
    sprite_index=HideSpr;
  }
  if (state==DYING) {
    image_speed=0.5;
    sprite_index=DeadSpr;
  }
  //draws the sprite 
  /*
  if(!stopped){
    if(inWater) {
      image_speed*=0.6;
    } */
    draw_sprite_ext(sprite_index,-1,x,y, 1 ,1,0,c_white,1);
  } else if (facing==LEFT) {
  //Handle left facing anims 
  /*********************************************
   ALL X VALUES MUST BE REVERSED AND INVERTED!!!
  *********************************************/
  if (state==STANDING || state == FALLING || state == JUMPING) {
    image_speed = 0.08;
    sprite_index=StandSpr;
  }
  if (state==RUNNING)
  {
    image_speed=1;
    sprite_index=RunSpr;
  }
  if (state==ATTACKING) {
    image_speed=1;
    sprite_index=AtkSpr;
  }
  if (state==HIDING) {
    sprite_index=HideSpr;
  }
  if (state==DYING) {
    image_speed=0.5;
    sprite_index=DeadSpr;
  }
  //draw sprite
  /*
  if(!stopped){
    if(inWater) {
      image_speed*=0.6;
    } */
    draw_sprite_ext(sprite_index,-1,x,y, -1 ,1,0,c_white,1);
}     // new code

/*
if (after == 1){
  var AfterImage = instance_create(x, y, oAfterImage);
  AfterImage.sprite_index = sprite_index;
  AfterImage.image_index = image_index;
  after=0;
  if(facing == LEFT) {
    AfterImage.facing = -1;
  }
  else if(facing == RIGHT) {
    AfterImage.facing = 1;
  }       
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
